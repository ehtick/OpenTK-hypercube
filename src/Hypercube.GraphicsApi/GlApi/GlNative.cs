// ------------------------------------------------------------------------------
// This code was generated by a Hypercube.Generators
// File: glcorearb.h
// Path: GLNative.g.cs
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using JetBrains.Annotations;

// ReSharper disable CommentTypo
// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo

namespace Hypercube.GraphicsApi.GlApi;

[PublicAPI]
public static unsafe partial class GlNative
{
    public const int True = 1;
    public const int False = 0;
    
    public static void LoadBindings(IBindingsContext context)
    {
        var procAddress = context.GetProcAddress("glGenVertexArrays");
        if (procAddress == IntPtr.Zero)
            throw new Exception("Function glGenVertexArrays not found.");
        
        _glGenVertexArrays = Marshal.GetDelegateForFunctionPointer<glGenVertexArraysDelegate>(procAddress);
    }
    
    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCullFace (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCullFace(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFrontFace (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFrontFace(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glHint (GLenum target, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glHint(uint target, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glLineWidth (GLfloat width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glLineWidth(float width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPointSize (GLfloat size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPointSize(float size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPolygonMode (GLenum face, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPolygonMode(uint face, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glScissor(int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexParameterf (GLenum target, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexParameterf(uint target, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexParameterfv(uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexParameteri (GLenum target, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexParameteri(uint target, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexParameteriv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexImage1D(uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexImage2D(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawBuffer (GLenum buf);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawBuffer(uint buf);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClear (GLbitfield mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClear(uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearColor(float red, float green, float blue, float alpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearStencil (GLint s);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearStencil(int s);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearDepth (GLdouble depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearDepth(double depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilMask (GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilMask(uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glColorMask(int red, int green, int blue, int alpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthMask (GLboolean flag);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthMask(int flag);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisable (GLenum cap);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisable(uint cap);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnable (GLenum cap);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnable(uint cap);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFinish (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFinish();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFlush (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFlush();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendFunc (GLenum sfactor, GLenum dfactor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendFunc(uint sfactor, uint dfactor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glLogicOp (GLenum opcode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glLogicOp(uint opcode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilFunc (GLenum func, GLint ref, GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilFunc(uint func, int refer, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilOp(uint fail, uint zfail, uint zpass);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthFunc (GLenum func);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthFunc(uint func);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPixelStoref (GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPixelStoref(uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPixelStorei (GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPixelStorei(uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glReadBuffer (GLenum src);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glReadBuffer(uint src);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glReadPixels(int x, int y, int width, int height, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBooleanv (GLenum pname, GLboolean *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBooleanv(uint pname, int* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetDoublev (GLenum pname, GLdouble *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetDoublev(uint pname, double* data);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glGetError (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetError();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFloatv (GLenum pname, GLfloat *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFloatv(uint pname, float* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetIntegerv (GLenum pname, GLint *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetIntegerv(uint pname, int* data);

    /// <remarks>
    /// <c>
    /// GLAPI const GLubyte *APIENTRY glGetString (GLenum name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial byte* glGetString(uint name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexImage(uint target, int level, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexParameterfv(uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexParameteriv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexLevelParameterfv(uint target, int level, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexLevelParameteriv(uint target, int level, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsEnabled (GLenum cap);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsEnabled(uint cap);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRange (GLdouble n, GLdouble f);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRange(double n, double f);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glViewport(int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawArrays (GLenum mode, GLint first, GLsizei count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawArrays(uint mode, int first, int count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElements (GLenum mode, GLsizei count, GLenum type, const void *indices);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElements(uint mode, int count, uint type, void* indices);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPointerv (GLenum pname, void **params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPointerv(uint pname, void** prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPolygonOffset (GLfloat factor, GLfloat units);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPolygonOffset(float factor, float units);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindTexture (GLenum target, GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindTexture(uint target, uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteTextures (GLsizei n, const GLuint *textures);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteTextures(int n, uint* textures);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenTextures (GLsizei n, GLuint *textures);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenTextures(int n, uint* textures);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsTexture (GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsTexture(uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawRangeElements(uint mode, uint start, uint end, int count, uint type, void* indices);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexImage3D(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glActiveTexture (GLenum texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glActiveTexture(uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSampleCoverage (GLfloat value, GLboolean invert);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSampleCoverage(float value, int invert);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTexImage3D(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTexImage2D(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTexImage1D(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTexSubImage3D(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTexSubImage1D(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, void *img);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetCompressedTexImage(uint target, int level, void* img);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendFuncSeparate(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawArrays(uint mode, int* first, int* count, int drawcount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElements(uint mode, int* count, uint type, void** indices, int drawcount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPointParameterf(uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPointParameterfv(uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPointParameteri(uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPointParameteriv(uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendColor(float red, float green, float blue, float alpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendEquation (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendEquation(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenQueries(int n, uint* ids);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteQueries(int n, uint* ids);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsQuery(uint id);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginQuery(uint target, uint id);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndQuery (GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndQuery(uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryiv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryObjectiv(uint id, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryObjectuiv(uint id, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindBuffer(uint target, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteBuffers(int n, uint* buffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenBuffers(int n, uint* buffers);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsBuffer(uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferData(uint target, nint size, void* data, uint usage);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferSubData(uint target, nint offset, nint size, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBufferSubData(uint target, nint offset, nint size, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glUnmapBuffer(uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBufferParameteriv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, void **params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBufferPointerv(uint target, uint pname, void** prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendEquationSeparate(uint modeRGB, uint modeAlpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawBuffers(int n, uint* bufs);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilOpSeparate(uint face, uint sfail, uint dpfail, uint dppass);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilFuncSeparate(uint face, uint func, int refer, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilMaskSeparate(uint face, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glAttachShader(uint program, uint shader);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindAttribLocation(uint program, uint index, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompileShader (GLuint shader);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompileShader(uint shader);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glCreateProgram (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCreateProgram();

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glCreateShader (GLenum type);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCreateShader(uint type);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteProgram (GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteProgram(uint program);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteShader (GLuint shader);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteShader(uint shader);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDetachShader(uint program, uint shader);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableVertexAttribArray(uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableVertexAttribArray(uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveAttrib(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveUniform(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetAttachedShaders(uint program, int maxCount, int* count, uint* shaders);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetAttribLocation(uint program, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramiv(uint program, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramInfoLog(uint program, int bufSize, int* length, byte* infoLog);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetShaderiv(uint shader, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetShaderInfoLog(uint shader, int bufSize, int* length, byte* infoLog);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetShaderSource(uint shader, int bufSize, int* length, byte* source);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetUniformLocation(uint program, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformfv(uint program, int location, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformiv(uint program, int location, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribdv(uint index, uint pname, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribfv(uint index, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribiv(uint index, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, void **pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribPointerv(uint index, uint pname, void** pointer);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsProgram(uint program);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsShader(uint shader);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glLinkProgram (GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glLinkProgram(uint program);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShaderSource(uint shader, int count, byte** str, int* length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUseProgram (GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUseProgram(uint program);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1f(int location, float v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2f(int location, float v0, float v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3f(int location, float v0, float v1, float v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4f(int location, float v0, float v1, float v2, float v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1i(int location, int v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2i(int location, int v0, int v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3i(int location, int v0, int v1, int v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4i(int location, int v0, int v1, int v2, int v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1fv(int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2fv(int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3fv(int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4fv(int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1iv(int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2iv(int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3iv(int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4iv(int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix2fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix3fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix4fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glValidateProgram (GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glValidateProgram(uint program);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib1d(uint index, double x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib1dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib1f(uint index, float x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib1fv(uint index, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib1s(uint index, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib1sv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib2d(uint index, double x, double y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib2dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib2f(uint index, float x, float y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib2fv(uint index, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib2s(uint index, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib2sv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib3d(uint index, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib3dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib3f(uint index, float x, float y, float z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib3fv(uint index, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib3s(uint index, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib3sv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Nbv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Niv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Nsv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Nub(uint index, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Nubv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Nuiv(uint index, uint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4Nusv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4bv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4d(uint index, double x, double y, double z, double w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4f(uint index, float x, float y, float z, float w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4fv(uint index, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4iv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4s(uint index, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4sv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4ubv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4uiv(uint index, uint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttrib4usv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribPointer(uint index, int size, uint type, int normalized, int stride, void* pointer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix2x3fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix3x2fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix2x4fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix4x2fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix3x4fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix4x3fv(int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glColorMaski(uint index, int r, int g, int b, int a);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBooleani_v(uint target, uint index, int* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetIntegeri_v(uint target, uint index, int* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnablei(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisablei(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsEnabledi(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginTransformFeedback(uint primitiveMode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndTransformFeedback (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndTransformFeedback();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindBufferRange(uint target, uint index, uint buffer, nint offset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindBufferBase(uint target, uint index, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTransformFeedbackVaryings(uint program, int count, byte** varyings, uint bufferMode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, int* length, int* size, uint* type, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClampColor(uint target, uint clamp);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginConditionalRender(uint id, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndConditionalRender (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndConditionalRender();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribIPointer(uint index, int size, uint type, int stride, void* pointer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribIiv(uint index, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribIuiv(uint index, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI1i(uint index, int x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI2i(uint index, int x, int y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI3i(uint index, int x, int y, int z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4i(uint index, int x, int y, int z, int w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI1ui(uint index, uint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI2ui(uint index, uint x, uint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI3ui(uint index, uint x, uint y, uint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI1iv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI2iv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI3iv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4iv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI1uiv(uint index, uint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI2uiv(uint index, uint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI3uiv(uint index, uint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4uiv(uint index, uint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4bv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4sv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4ubv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribI4usv(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformuiv(uint program, int location, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindFragDataLocation(uint program, uint color, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetFragDataLocation(uint program, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1ui(int location, uint v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2ui(int location, uint v0, uint v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3ui(int location, uint v0, uint v1, uint v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1uiv(int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2uiv(int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3uiv(int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4uiv(int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexParameterIiv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexParameterIuiv(uint target, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexParameterIiv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTexParameterIuiv(uint target, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearBufferiv(uint buffer, int drawbuffer, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearBufferuiv(uint buffer, int drawbuffer, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearBufferfv(uint buffer, int drawbuffer, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsRenderbuffer(uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindRenderbuffer(uint target, uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteRenderbuffers(int n, uint* renderbuffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenRenderbuffers(int n, uint* renderbuffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glRenderbufferStorage(uint target, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetRenderbufferParameteriv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsFramebuffer(uint framebuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindFramebuffer(uint target, uint framebuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteFramebuffers(int n, uint* framebuffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenFramebuffers(int n, uint* framebuffers);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCheckFramebufferStatus(uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTexture1D(uint target, uint attachment, uint textarget, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTexture2D(uint target, uint attachment, uint textarget, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTexture3D(uint target, uint attachment, uint textarget, uint texture, int level, int zoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferRenderbuffer(uint target, uint attachment, uint renderbuffertarget, uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFramebufferAttachmentParameteriv(uint target, uint attachment, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenerateMipmap (GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenerateMipmap(uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glRenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTextureLayer(uint target, uint attachment, uint texture, int level, int layer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFlushMappedBufferRange(uint target, nint offset, nint length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindVertexArray (GLuint array);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindVertexArray(uint array);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteVertexArrays(int n, uint* arrays);

    private delegate void glGenVertexArraysDelegate(int n, uint* arrays);
    private static glGenVertexArraysDelegate _glGenVertexArrays;

    /// <remarks>
    /// <c>GLAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint *arrays);</c>
    /// <list type="table">
    /// <listheader>
    /// <term>OpenGL Version</term>
    /// <description>Supported</description>
    /// </listheader>
    /// <item>
    /// <term>2.0</term>
    /// <description>Not Supported</description>
    /// </item>
    /// <item>
    /// <term>2.1</term>
    /// <description>Not Supported</description>
    /// </item>
    /// <item>
    /// <term>3.0+</term>
    /// <description>Supported</description>
    /// </item>
    /// </list>
    /// </remarks>
    public static void glGenVertexArrays(int n, uint* arrays)
    {
        _glGenVertexArrays(n, arrays);
    }

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsVertexArray(uint array);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawArraysInstanced(uint mode, int first, int count, int instancecount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsInstanced(uint mode, int count, uint type, void* indices, int instancecount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexBuffer(uint target, uint internalformat, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPrimitiveRestartIndex(uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyBufferSubData(uint readTarget, uint writeTarget, nint readOffset, nint writeOffset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformIndices(uint program, int uniformCount, byte** uniformNames, uint* uniformIndices);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, byte* uniformName);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetUniformBlockIndex(uint program, byte* uniformBlockName);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsBaseVertex(uint mode, int count, uint type, void* indices, int basevertex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, void* indices, int instancecount, int basevertex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElementsBaseVertex(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProvokingVertex (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProvokingVertex(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glFenceSync(uint condition, uint flags);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsSync(nint sync);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteSync (GLsync sync);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteSync(nint sync);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glClientWaitSync(nint sync, uint flags, nint timeout);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glWaitSync(nint sync, uint flags, nint timeout);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetInteger64v(uint pname, nint* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetSynciv(nint sync, uint pname, int count, int* length, int* values);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetInteger64i_v(uint target, uint index, nint* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBufferParameteri64v(uint target, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTexture(uint target, uint attachment, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultisamplefv(uint pname, uint index, float* val);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSampleMaski (GLuint maskNumber, GLbitfield mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSampleMaski(uint maskNumber, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetFragDataIndex(uint program, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenSamplers(int count, uint* samplers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteSamplers(int count, uint* samplers);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsSampler(uint sampler);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindSampler(uint unit, uint sampler);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSamplerParameteri(uint sampler, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSamplerParameteriv(uint sampler, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSamplerParameterf(uint sampler, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSamplerParameterfv(uint sampler, uint pname, float* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSamplerParameterIiv(uint sampler, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSamplerParameterIuiv(uint sampler, uint pname, uint* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetSamplerParameteriv(uint sampler, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetSamplerParameterIiv(uint sampler, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetSamplerParameterfv(uint sampler, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetSamplerParameterIuiv(uint sampler, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glQueryCounter(uint id, uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryObjecti64v(uint id, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryObjectui64v(uint id, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribDivisor(uint index, uint divisor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP1ui(uint index, uint type, int normalized, uint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP1uiv(uint index, uint type, int normalized, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP2ui(uint index, uint type, int normalized, uint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP2uiv(uint index, uint type, int normalized, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP3ui(uint index, uint type, int normalized, uint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP3uiv(uint index, uint type, int normalized, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP4ui(uint index, uint type, int normalized, uint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribP4uiv(uint index, uint type, int normalized, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMinSampleShading (GLfloat value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMinSampleShading(float value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendEquationi(uint buf, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendFunci(uint buf, uint src, uint dst);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const void *indirect);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawArraysIndirect(uint mode, void* indirect);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsIndirect(uint mode, uint type, void* indirect);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1d(int location, double x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2d(int location, double x, double y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3d(int location, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4d(int location, double x, double y, double z, double w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1dv(int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2dv(int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3dv(int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4dv(int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix2dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix3dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix4dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix2x3dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix2x4dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix3x2dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix3x4dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix4x2dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformMatrix4x3dv(int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformdv(uint program, int location, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetSubroutineUniformLocation(uint program, uint shadertype, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetSubroutineIndex(uint program, uint shadertype, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, int* values);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufSize, int* length, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveSubroutineName(uint program, uint shadertype, uint index, int bufSize, int* length, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformSubroutinesuiv(uint shadertype, int count, uint* indices);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformSubroutineuiv(uint shadertype, int location, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramStageiv(uint program, uint shadertype, uint pname, int* values);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPatchParameteri(uint pname, int value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPatchParameterfv(uint pname, float* values);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindTransformFeedback(uint target, uint id);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteTransformFeedbacks(int n, uint* ids);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenTransformFeedbacks(int n, uint* ids);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsTransformFeedback(uint id);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPauseTransformFeedback (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPauseTransformFeedback();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glResumeTransformFeedback (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glResumeTransformFeedback();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawTransformFeedback(uint mode, uint id);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawTransformFeedbackStream(uint mode, uint id, uint stream);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginQueryIndexed(uint target, uint index, uint id);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndQueryIndexed(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryIndexediv(uint target, uint index, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glReleaseShaderCompiler (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glReleaseShaderCompiler();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShaderBinary(int count, uint* shaders, uint binaryFormat, void* binary, int length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, int* range, int* precision);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRangef (GLfloat n, GLfloat f);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRangef(float n, float f);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearDepthf (GLfloat d);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearDepthf(float d);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramBinary(uint program, int bufSize, int* length, uint* binaryFormat, void* binary);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramBinary(uint program, uint binaryFormat, void* binary, int length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramParameteri(uint program, uint pname, int value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUseProgramStages(uint pipeline, uint stages, uint program);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glActiveShaderProgram(uint pipeline, uint program);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar *const*strings);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCreateShaderProgramv(uint type, int count, byte** strings);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindProgramPipeline(uint pipeline);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteProgramPipelines(int n, uint* pipelines);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenProgramPipelines(int n, uint* pipelines);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsProgramPipeline(uint pipeline);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramPipelineiv(uint pipeline, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1i(uint program, int location, int v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1iv(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1f(uint program, int location, float v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1fv(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1d(uint program, int location, double v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1dv(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1ui(uint program, int location, uint v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1uiv(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2i(uint program, int location, int v0, int v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2iv(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2f(uint program, int location, float v0, float v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2fv(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2d(uint program, int location, double v0, double v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2dv(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2ui(uint program, int location, uint v0, uint v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2uiv(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3i(uint program, int location, int v0, int v1, int v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3iv(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3f(uint program, int location, float v0, float v1, float v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3fv(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3d(uint program, int location, double v0, double v1, double v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3dv(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3uiv(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4iv(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4fv(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4dv(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4uiv(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x3fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x2fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x4fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x2fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x4fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x3fv(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x3dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x2dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x4dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x2dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x4dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x3dv(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glValidateProgramPipeline(uint pipeline);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, int* length, byte* infoLog);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1d(uint index, double x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL2d(uint index, double x, double y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL3d(uint index, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL4d(uint index, double x, double y, double z, double w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL2dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL3dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL4dv(uint index, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribLPointer(uint index, int size, uint type, int stride, void* pointer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribLdv(uint index, uint pname, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glViewportArrayv(uint first, int count, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glViewportIndexedf(uint index, float x, float y, float w, float h);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glViewportIndexedfv(uint index, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glScissorArrayv(uint first, int count, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glScissorIndexed(uint index, int left, int bottom, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glScissorIndexedv(uint index, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRangeArrayv(uint first, int count, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLdouble n, GLdouble f);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRangeIndexed(uint index, double n, double f);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFloati_v(uint target, uint index, float* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetDoublei_v(uint target, uint index, double* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawArraysInstancedBaseInstance (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawArraysInstancedBaseInstance(uint mode, int first, int count, int instancecount, uint baseinstance);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsInstancedBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsInstancedBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsInstancedBaseVertexBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetInternalformativ (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetInternalformativ(uint target, uint internalformat, uint pname, int count, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindImageTexture(uint unit, uint texture, int level, int layered, int layer, uint access, uint format);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMemoryBarrier(uint barriers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage1D(uint target, int levels, uint internalformat, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage3D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawTransformFeedbackInstanced (GLenum mode, GLuint id, GLsizei instancecount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawTransformFeedbackInstanced(uint mode, uint id, int instancecount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawTransformFeedbackStreamInstanced (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawTransformFeedbackStreamInstanced(uint mode, uint id, uint stream, int instancecount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearBufferData (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearBufferData(uint target, uint internalformat, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearBufferSubData (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearBufferSubData(uint target, uint internalformat, nint offset, nint size, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDispatchCompute (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDispatchComputeIndirect (GLintptr indirect);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDispatchComputeIndirect(nint indirect);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyImageSubData (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferParameteri (GLenum target, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferParameteri(uint target, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFramebufferParameteriv (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFramebufferParameteriv(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetInternalformati64v (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetInternalformati64v(uint target, uint internalformat, uint pname, int count, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateTexImage (GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateTexImage(uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateBufferSubData(uint buffer, nint offset, nint length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateBufferData (GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateBufferData(uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateFramebuffer(uint target, int numAttachments, uint* attachments);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateSubFramebuffer (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateSubFramebuffer(uint target, int numAttachments, uint* attachments, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawArraysIndirect (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawArraysIndirect(uint mode, void* indirect, int drawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElementsIndirect (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElementsIndirect(uint mode, uint type, void* indirect, int drawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramInterfaceiv (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramInterfaceiv(uint program, uint programInterface, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGetProgramResourceIndex (GLuint program, GLenum programInterface, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetProgramResourceIndex(uint program, uint programInterface, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramResourceName (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, int* length, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramResourceiv (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetProgramResourceLocation (GLuint program, GLenum programInterface, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetProgramResourceLocation(uint program, uint programInterface, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI GLint APIENTRY glGetProgramResourceLocationIndex (GLuint program, GLenum programInterface, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glGetProgramResourceLocationIndex(uint program, uint programInterface, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShaderStorageBlockBinding (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexBufferRange (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexBufferRange(uint target, uint internalformat, uint buffer, nint offset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage2DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage3DMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureView (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindVertexBuffer (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribFormat (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribFormat(uint attribindex, int size, uint type, int normalized, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribIFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribLFormat (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribBinding (GLuint attribindex, GLuint bindingindex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribBinding(uint attribindex, uint bindingindex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexBindingDivisor (GLuint bindingindex, GLuint divisor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexBindingDivisor(uint bindingindex, uint divisor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDebugMessageControl (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDebugMessageControl(uint source, uint type, uint severity, int count, uint* ids, int enabled);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDebugMessageInsert (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDebugMessageInsert(uint source, uint type, uint id, uint severity, int length, byte* buf);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDebugMessageCallback (GLDEBUGPROC callback, const void *userParam);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDebugMessageCallback(nint callback, void* userParam);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGetDebugMessageLog (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetDebugMessageLog(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPushDebugGroup (GLenum source, GLuint id, GLsizei length, const GLchar *message);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPushDebugGroup(uint source, uint id, int length, byte* message);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPopDebugGroup (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPopDebugGroup();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glObjectLabel (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glObjectLabel(uint identifier, uint name, int length, byte* label);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetObjectLabel (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetObjectLabel(uint identifier, uint name, int bufSize, int* length, byte* label);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glObjectPtrLabel (const void *ptr, GLsizei length, const GLchar *label);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glObjectPtrLabel(void* ptr, int length, byte* label);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetObjectPtrLabel (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetObjectPtrLabel(void* ptr, int bufSize, int* length, byte* label);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferStorage (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferStorage(uint target, nint size, void* data, uint flags);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearTexImage (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearTexImage(uint texture, int level, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearTexSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindBuffersBase (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindBuffersBase(uint target, uint first, int count, uint* buffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindBuffersRange (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindBuffersRange(uint target, uint first, int count, uint* buffers, nint* offsets, nint* sizes);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindTextures (GLuint first, GLsizei count, const GLuint *textures);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindTextures(uint first, int count, uint* textures);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindSamplers (GLuint first, GLsizei count, const GLuint *samplers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindSamplers(uint first, int count, uint* samplers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindImageTextures (GLuint first, GLsizei count, const GLuint *textures);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindImageTextures(uint first, int count, uint* textures);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindVertexBuffers (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindVertexBuffers(uint first, int count, uint* buffers, nint* offsets, int* strides);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClipControl(uint origin, uint depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateTransformFeedbacks (GLsizei n, GLuint *ids);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateTransformFeedbacks(int n, uint* ids);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTransformFeedbackBufferBase (GLuint xfb, GLuint index, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTransformFeedbackBufferRange (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTransformFeedbackiv (GLuint xfb, GLenum pname, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTransformFeedbackiv(uint xfb, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTransformFeedbacki_v (GLuint xfb, GLenum pname, GLuint index, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTransformFeedbacki_v(uint xfb, uint pname, uint index, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTransformFeedbacki64_v (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTransformFeedbacki64_v(uint xfb, uint pname, uint index, nint* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateBuffers (GLsizei n, GLuint *buffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateBuffers(int n, uint* buffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferStorage (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferStorage(uint buffer, nint size, void* data, uint flags);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferData (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferData(uint buffer, nint size, void* data, uint usage);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferSubData(uint buffer, nint offset, nint size, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyNamedBufferSubData (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedBufferData (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedBufferData(uint buffer, uint internalformat, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedBufferSubData (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedBufferSubData(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glUnmapNamedBuffer (GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glUnmapNamedBuffer(uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFlushMappedNamedBufferRange (GLuint buffer, GLintptr offset, GLsizeiptr length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFlushMappedNamedBufferRange(uint buffer, nint offset, nint length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferParameteriv (GLuint buffer, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferParameteriv(uint buffer, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferParameteri64v (GLuint buffer, GLenum pname, GLint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferParameteri64v(uint buffer, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferPointerv (GLuint buffer, GLenum pname, void **params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferPointerv(uint buffer, uint pname, void** prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferSubData (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferSubData(uint buffer, nint offset, nint size, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateFramebuffers (GLsizei n, GLuint *framebuffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateFramebuffers(int n, uint* framebuffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferRenderbuffer (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferRenderbuffer(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferParameteri (GLuint framebuffer, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferParameteri(uint framebuffer, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTexture (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTexture(uint framebuffer, uint attachment, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTextureLayer (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTextureLayer(uint framebuffer, uint attachment, uint texture, int level, int layer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferDrawBuffer (GLuint framebuffer, GLenum buf);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferDrawBuffer(uint framebuffer, uint buf);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferDrawBuffers (GLuint framebuffer, GLsizei n, const GLenum *bufs);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferReadBuffer (GLuint framebuffer, GLenum src);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferReadBuffer(uint framebuffer, uint src);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateNamedFramebufferData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInvalidateNamedFramebufferSubData (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedFramebufferiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedFramebufferiv(uint framebuffer, uint buffer, int drawbuffer, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedFramebufferuiv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedFramebufferuiv(uint framebuffer, uint buffer, int drawbuffer, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedFramebufferfv (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedFramebufferfv(uint framebuffer, uint buffer, int drawbuffer, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedFramebufferfi (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedFramebufferfi(uint framebuffer, uint buffer, int drawbuffer, float depth, int stencil);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlitNamedFramebuffer (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glCheckNamedFramebufferStatus (GLuint framebuffer, GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCheckNamedFramebufferStatus(uint framebuffer, uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedFramebufferParameteriv (GLuint framebuffer, GLenum pname, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedFramebufferParameteriv(uint framebuffer, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, uint attachment, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateRenderbuffers (GLsizei n, GLuint *renderbuffers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateRenderbuffers(int n, uint* renderbuffers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedRenderbufferStorage (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedRenderbufferStorage(uint renderbuffer, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedRenderbufferStorageMultisample (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedRenderbufferParameteriv (GLuint renderbuffer, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedRenderbufferParameteriv(uint renderbuffer, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateTextures (GLenum target, GLsizei n, GLuint *textures);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateTextures(uint target, int n, uint* textures);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureBuffer (GLuint texture, GLenum internalformat, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureBuffer(uint texture, uint internalformat, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureBufferRange (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureBufferRange(uint texture, uint internalformat, uint buffer, nint offset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage1D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage1D(uint texture, int levels, uint internalformat, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage2D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage2D(uint texture, int levels, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage3D (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage3D(uint texture, int levels, uint internalformat, int width, int height, int depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage2DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage2DMultisample(uint texture, int samples, uint internalformat, int width, int height, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage3DMultisample (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage3DMultisample(uint texture, int samples, uint internalformat, int width, int height, int depth, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureSubImage1D (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureSubImage2D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureSubImage3D (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterf (GLuint texture, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterf(uint texture, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterfv (GLuint texture, GLenum pname, const GLfloat *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterfv(uint texture, uint pname, float* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameteri (GLuint texture, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameteri(uint texture, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterIiv (GLuint texture, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterIiv(uint texture, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterIuiv (GLuint texture, GLenum pname, const GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterIuiv(uint texture, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameteriv (GLuint texture, GLenum pname, const GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameteriv(uint texture, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenerateTextureMipmap (GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenerateTextureMipmap(uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindTextureUnit (GLuint unit, GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindTextureUnit(uint unit, uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureImage (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureImage(uint texture, int level, uint format, uint type, int bufSize, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetCompressedTextureImage (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetCompressedTextureImage(uint texture, int level, int bufSize, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureLevelParameterfv (GLuint texture, GLint level, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureLevelParameterfv(uint texture, int level, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureLevelParameteriv (GLuint texture, GLint level, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureLevelParameteriv(uint texture, int level, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterfv (GLuint texture, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterfv(uint texture, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterIiv (GLuint texture, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterIiv(uint texture, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterIuiv (GLuint texture, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterIuiv(uint texture, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameteriv (GLuint texture, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameteriv(uint texture, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateVertexArrays (GLsizei n, GLuint *arrays);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateVertexArrays(int n, uint* arrays);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableVertexArrayAttrib (GLuint vaobj, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableVertexArrayAttrib(uint vaobj, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableVertexArrayAttrib (GLuint vaobj, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableVertexArrayAttrib(uint vaobj, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayElementBuffer (GLuint vaobj, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayElementBuffer(uint vaobj, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexBuffer (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexBuffers (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayAttribBinding (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayAttribFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, uint type, int normalized, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayAttribIFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayAttribLFormat (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayBindingDivisor (GLuint vaobj, GLuint bindingindex, GLuint divisor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayiv (GLuint vaobj, GLenum pname, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayiv(uint vaobj, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayIndexediv (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayIndexediv(uint vaobj, uint index, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayIndexed64iv (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayIndexed64iv(uint vaobj, uint index, uint pname, nint* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateSamplers (GLsizei n, GLuint *samplers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateSamplers(int n, uint* samplers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateProgramPipelines (GLsizei n, GLuint *pipelines);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateProgramPipelines(int n, uint* pipelines);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateQueries (GLenum target, GLsizei n, GLuint *ids);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateQueries(uint target, int n, uint* ids);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryBufferObjecti64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryBufferObjecti64v(uint id, uint buffer, uint pname, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryBufferObjectiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryBufferObjectiv(uint id, uint buffer, uint pname, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryBufferObjectui64v(uint id, uint buffer, uint pname, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetQueryBufferObjectuiv(uint id, uint buffer, uint pname, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMemoryBarrierByRegion(uint barriers);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, int bufSize, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glGetGraphicsResetStatus (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetGraphicsResetStatus();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnCompressedTexImage (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnCompressedTexImage(uint target, int lod, int bufSize, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnTexImage(uint target, int level, uint format, uint type, int bufSize, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformdv (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformdv(uint program, int location, int bufSize, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformfv (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformfv(uint program, int location, int bufSize, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformiv (GLuint program, GLint location, GLsizei bufSize, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformiv(uint program, int location, int bufSize, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformuiv (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformuiv(uint program, int location, int bufSize, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glReadnPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glReadnPixels(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureBarrier (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureBarrier();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSpecializeShader (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSpecializeShader(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawArraysIndirectCount (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawArraysIndirectCount(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElementsIndirectCount (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElementsIndirectCount(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPolygonOffsetClamp (GLfloat factor, GLfloat units, GLfloat clamp);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPolygonOffsetClamp(float factor, float units, float clamp);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPrimitiveBoundingBoxARB (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint64 APIENTRY glGetTextureHandleARB (GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetTextureHandleARB(uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleARB (GLuint texture, GLuint sampler);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetTextureSamplerHandleARB(uint texture, uint sampler);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeTextureHandleResidentARB (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeTextureHandleResidentARB(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeTextureHandleNonResidentARB (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeTextureHandleNonResidentARB(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint64 APIENTRY glGetImageHandleARB (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetImageHandleARB(uint texture, int level, int layered, int layer, uint format);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeImageHandleResidentARB (GLuint64 handle, GLenum access);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeImageHandleResidentARB(nint handle, uint access);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeImageHandleNonResidentARB (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeImageHandleNonResidentARB(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformHandleui64ARB (GLint location, GLuint64 value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformHandleui64ARB(int location, nint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformHandleui64vARB (GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformHandleui64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformHandleui64ARB (GLuint program, GLint location, GLuint64 value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformHandleui64ARB(uint program, int location, nint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformHandleui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformHandleui64vARB(uint program, int location, int count, nint* values);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsTextureHandleResidentARB (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsTextureHandleResidentARB(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsImageHandleResidentARB (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsImageHandleResidentARB(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1ui64ARB (GLuint index, GLuint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1ui64ARB(uint index, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1ui64vARB (GLuint index, const GLuint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1ui64vARB(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribLui64vARB (GLuint index, GLenum pname, GLuint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribLui64vARB(uint index, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glCreateSyncFromCLeventARB(nint* context, nint* ev, uint flags);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDispatchComputeGroupSizeARB (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDebugMessageControlARB(uint source, uint type, uint severity, int count, uint* ids, int enabled);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDebugMessageInsertARB(uint source, uint type, uint id, uint severity, int length, byte* buf);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const void *userParam);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDebugMessageCallbackARB(nint callback, void* userParam);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetDebugMessageLogARB(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendEquationiARB(uint buf, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendEquationSeparateiARB(uint buf, uint modeRGB, uint modeAlpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendFunciARB(uint buf, uint src, uint dst);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendFuncSeparateiARB(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawArraysInstancedARB(uint mode, int first, int count, int primcount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsInstancedARB(uint mode, int count, uint type, void* indices, int primcount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramParameteriARB(uint program, uint pname, int value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTextureARB(uint target, uint attachment, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTextureLayerARB(uint target, uint attachment, uint texture, int level, int layer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTextureFaceARB(uint target, uint attachment, uint texture, int level, uint face);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSpecializeShaderARB (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1i64ARB (GLint location, GLint64 x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1i64ARB(int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2i64ARB (GLint location, GLint64 x, GLint64 y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2i64ARB(int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3i64ARB(int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4i64ARB (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4i64ARB(int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1i64vARB (GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1i64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2i64vARB (GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2i64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3i64vARB (GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3i64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4i64vARB (GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4i64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1ui64ARB (GLint location, GLuint64 x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1ui64ARB(int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2ui64ARB (GLint location, GLuint64 x, GLuint64 y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2ui64ARB(int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3ui64ARB(int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4ui64ARB (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4ui64ARB(int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1ui64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2ui64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3ui64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4ui64vARB (GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4ui64vARB(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformi64vARB (GLuint program, GLint location, GLint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformi64vARB(uint program, int location, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformui64vARB (GLuint program, GLint location, GLuint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformui64vARB(uint program, int location, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformi64vARB (GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformi64vARB(uint program, int location, int bufSize, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformui64vARB (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformui64vARB(uint program, int location, int bufSize, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1i64ARB (GLuint program, GLint location, GLint64 x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1i64ARB(uint program, int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2i64ARB(uint program, int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3i64ARB(uint program, int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4i64ARB (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4i64ARB(uint program, int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1i64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2i64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3i64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4i64vARB (GLuint program, GLint location, GLsizei count, const GLint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4i64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1ui64ARB (GLuint program, GLint location, GLuint64 x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1ui64ARB(uint program, int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2ui64ARB(uint program, int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3ui64ARB(uint program, int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4ui64ARB (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4ui64ARB(uint program, int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1ui64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2ui64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3ui64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4ui64vARB (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4ui64vARB(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawArraysIndirectCountARB (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawArraysIndirectCountARB(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElementsIndirectCountARB (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElementsIndirectCountARB(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint divisor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribDivisorARB(uint index, uint divisor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMaxShaderCompilerThreadsARB (GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMaxShaderCompilerThreadsARB(uint count);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetGraphicsResetStatusARB();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnTexImageARB(uint target, int level, uint format, uint type, int bufSize, void* img);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glReadnPixelsARB(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, void *img);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnCompressedTexImageARB(uint target, int lod, int bufSize, void* img);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformfvARB(uint program, int location, int bufSize, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformivARB(uint program, int location, int bufSize, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformuivARB(uint program, int location, int bufSize, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetnUniformdvARB(uint program, int location, int bufSize, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferSampleLocationsfvARB (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferSampleLocationsfvARB(uint target, uint start, int count, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvARB (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEvaluateDepthValuesARB (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEvaluateDepthValuesARB();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMinSampleShadingARB (GLfloat value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMinSampleShadingARB(float value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedStringARB(uint type, int namelen, byte* name, int stringlen, byte* str);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteNamedStringARB(int namelen, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompileShaderIncludeARB(uint shader, int count, byte** path, int* length);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsNamedStringARB(int namelen, byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedStringARB(int namelen, byte* name, int bufSize, int* stringlen, byte* str);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedStringivARB(int namelen, byte* name, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferPageCommitmentARB (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferPageCommitmentARB(uint target, nint offset, nint size, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferPageCommitmentEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferPageCommitmentEXT(uint buffer, nint offset, nint size, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferPageCommitmentARB (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferPageCommitmentARB(uint buffer, nint offset, nint size, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexPageCommitmentARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexPageCommitmentARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexBufferARB(uint target, uint internalformat, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRangeArraydvNV (GLuint first, GLsizei count, const GLdouble *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRangeArraydvNV(uint first, int count, double* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRangeIndexeddNV (GLuint index, GLdouble n, GLdouble f);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRangeIndexeddNV(uint index, double n, double f);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendBarrierKHR (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendBarrierKHR();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMaxShaderCompilerThreadsKHR (GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMaxShaderCompilerThreadsKHR(uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glRenderbufferStorageMultisampleAdvancedAMD (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glRenderbufferStorageMultisampleAdvancedAMD(uint target, int samples, int storageSamples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleAdvancedAMD (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, byte* groupString);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, byte* counterString);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, uint pname, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenPerfMonitorsAMD(int n, uint* monitors);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeletePerfMonitorsAMD(int n, uint* monitors);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSelectPerfMonitorCountersAMD(uint monitor, int enable, uint group, int numCounters, uint* counterList);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginPerfMonitorAMD(uint monitor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndPerfMonitorAMD(uint monitor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfMonitorCounterDataAMD(uint monitor, uint pname, int dataSize, uint* data, int* bytesWritten);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEGLImageTargetTexStorageEXT (GLenum target, GLeglImageOES image, const GLint* attrib_list);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEGLImageTargetTexStorageEXT(uint target, nint image, nint attrib_list);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEGLImageTargetTextureStorageEXT (GLuint texture, GLeglImageOES image, const GLint* attrib_list);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEGLImageTargetTextureStorageEXT(uint texture, nint image, nint attrib_list);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glLabelObjectEXT (GLenum type, GLuint object, GLsizei length, const GLchar *label);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glLabelObjectEXT(uint type, uint obj, int length, byte* label);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetObjectLabelEXT (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetObjectLabelEXT(uint type, uint obj, int bufSize, int* length, byte* label);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInsertEventMarkerEXT (GLsizei length, const GLchar *marker);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInsertEventMarkerEXT(int length, byte* marker);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPushGroupMarkerEXT (GLsizei length, const GLchar *marker);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPushGroupMarkerEXT(int length, byte* marker);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPopGroupMarkerEXT (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPopGroupMarkerEXT();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoadfEXT(uint mode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoaddEXT(uint mode, double* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMultfEXT(uint mode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMultdEXT(uint mode, double* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoadIdentityEXT(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixRotatefEXT(uint mode, float angle, float x, float y, float z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixRotatedEXT(uint mode, double angle, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixScalefEXT(uint mode, float x, float y, float z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixScaledEXT(uint mode, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixTranslatefEXT(uint mode, float x, float y, float z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixTranslatedEXT(uint mode, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixFrustumEXT(uint mode, double left, double right, double bottom, double top, double zNear, double zFar);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixOrthoEXT(uint mode, double left, double right, double bottom, double top, double zNear, double zFar);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixPopEXT (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixPopEXT(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixPushEXT (GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixPushEXT(uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClientAttribDefaultEXT(uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPushClientAttribDefaultEXT(uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterfEXT(uint texture, uint target, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterfvEXT(uint texture, uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameteriEXT(uint texture, uint target, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterivEXT(uint texture, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureImage1DEXT(uint texture, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureImage2DEXT(uint texture, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureImage1DEXT(uint texture, uint target, int level, uint internalformat, int x, int y, int width, int border);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureImage2DEXT(uint texture, uint target, int level, uint internalformat, int x, int y, int width, int height, int border);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int x, int y, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureImageEXT(uint texture, uint target, int level, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterfvEXT(uint texture, uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterivEXT(uint texture, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureLevelParameterfvEXT(uint texture, uint target, int level, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureLevelParameterivEXT(uint texture, uint target, int level, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureImage3DEXT(uint texture, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindMultiTextureEXT(uint texunit, uint target, uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexCoordPointerEXT(uint texunit, int size, uint type, int stride, void* pointer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexEnvfEXT(uint texunit, uint target, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexEnvfvEXT(uint texunit, uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexEnviEXT(uint texunit, uint target, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexEnvivEXT(uint texunit, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexGendEXT(uint texunit, uint coord, uint pname, double param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexGendvEXT(uint texunit, uint coord, uint pname, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexGenfEXT(uint texunit, uint coord, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexGenfvEXT(uint texunit, uint coord, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexGeniEXT(uint texunit, uint coord, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexGenivEXT(uint texunit, uint coord, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexEnvfvEXT(uint texunit, uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexEnvivEXT(uint texunit, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexGendvEXT(uint texunit, uint coord, uint pname, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexGenfvEXT(uint texunit, uint coord, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexGenivEXT(uint texunit, uint coord, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexParameteriEXT(uint texunit, uint target, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexParameterivEXT(uint texunit, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexParameterfEXT(uint texunit, uint target, uint pname, float param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexParameterfvEXT(uint texunit, uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexImage1DEXT(uint texunit, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexImage2DEXT(uint texunit, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyMultiTexImage1DEXT(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int border);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyMultiTexImage2DEXT(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int height, int border);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int x, int y, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexImageEXT(uint texunit, uint target, int level, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexParameterfvEXT(uint texunit, uint target, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexParameterivEXT(uint texunit, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexLevelParameterfvEXT(uint texunit, uint target, int level, uint pname, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexLevelParameterivEXT(uint texunit, uint target, int level, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexImage3DEXT(uint texunit, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableClientStateIndexedEXT(uint array, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableClientStateIndexedEXT(uint array, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFloatIndexedvEXT(uint target, uint index, float* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetDoubleIndexedvEXT(uint target, uint index, double* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, void **data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPointerIndexedvEXT(uint target, uint index, void** data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableIndexedEXT(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableIndexedEXT(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsEnabledIndexedEXT(uint target, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetIntegerIndexedvEXT(uint target, uint index, int* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBooleanIndexedvEXT(uint target, uint index, int* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureImage3DEXT(uint texture, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureImage2DEXT(uint texture, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureImage1DEXT(uint texture, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureSubImage3DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureSubImage2DEXT(uint texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedTextureSubImage1DEXT(uint texture, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, void *img);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetCompressedTextureImageEXT(uint texture, uint target, int lod, void* img);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedMultiTexImage3DEXT(uint texunit, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedMultiTexImage2DEXT(uint texunit, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedMultiTexImage1DEXT(uint texunit, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedMultiTexSubImage3DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedMultiTexSubImage2DEXT(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompressedMultiTexSubImage1DEXT(uint texunit, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, void *img);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetCompressedMultiTexImageEXT(uint texunit, uint target, int lod, void* img);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoadTransposefEXT(uint mode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoadTransposedEXT(uint mode, double* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMultTransposefEXT(uint mode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMultTransposedEXT(uint mode, double* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferDataEXT(uint buffer, nint size, void* data, uint usage);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glUnmapNamedBufferEXT(uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferParameterivEXT(uint buffer, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, void **params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferPointervEXT(uint buffer, uint pname, void** prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1fEXT(uint program, int location, float v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2fEXT(uint program, int location, float v0, float v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1iEXT(uint program, int location, int v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2iEXT(uint program, int location, int v0, int v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1fvEXT(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2fvEXT(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3fvEXT(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4fvEXT(uint program, int location, int count, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1ivEXT(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2ivEXT(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3ivEXT(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4ivEXT(uint program, int location, int count, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, int transpose, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureBufferEXT(uint texture, uint target, uint internalformat, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexBufferEXT(uint texunit, uint target, uint internalformat, uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterIivEXT(uint texture, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureParameterIuivEXT(uint texture, uint target, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterIivEXT(uint texture, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetTextureParameterIuivEXT(uint texture, uint target, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexParameterIivEXT(uint texunit, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexParameterIuivEXT(uint texunit, uint target, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexParameterIivEXT(uint texunit, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMultiTexParameterIuivEXT(uint texunit, uint target, uint pname, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1uiEXT(uint program, int location, uint v0);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1uivEXT(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2uivEXT(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3uivEXT(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4uivEXT(uint program, int location, int count, uint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameters4fvEXT(uint program, uint target, uint index, int count, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameterI4iEXT(uint program, uint target, uint index, int x, int y, int z, int w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameterI4ivEXT(uint program, uint target, uint index, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParametersI4ivEXT(uint program, uint target, uint index, int count, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameterI4uiEXT(uint program, uint target, uint index, uint x, uint y, uint z, uint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameterI4uivEXT(uint program, uint target, uint index, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParametersI4uivEXT(uint program, uint target, uint index, int count, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedProgramLocalParameterIivEXT(uint program, uint target, uint index, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedProgramLocalParameterIuivEXT(uint program, uint target, uint index, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableClientStateiEXT (GLenum array, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableClientStateiEXT(uint array, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableClientStateiEXT (GLenum array, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableClientStateiEXT(uint array, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFloati_vEXT (GLenum pname, GLuint index, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFloati_vEXT(uint pname, uint index, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetDoublei_vEXT (GLenum pname, GLuint index, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetDoublei_vEXT(uint pname, uint index, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPointeri_vEXT (GLenum pname, GLuint index, void **params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPointeri_vEXT(uint pname, uint index, void** prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramStringEXT(uint program, uint target, uint format, int len, void* str);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameter4dEXT(uint program, uint target, uint index, double x, double y, double z, double w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameter4dvEXT(uint program, uint target, uint index, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameter4fEXT(uint program, uint target, uint index, float x, float y, float z, float w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedProgramLocalParameter4fvEXT(uint program, uint target, uint index, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedProgramLocalParameterdvEXT(uint program, uint target, uint index, double* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedProgramLocalParameterfvEXT(uint program, uint target, uint index, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedProgramivEXT(uint program, uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, void *string);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedProgramStringEXT(uint program, uint target, uint pname, void* str);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedRenderbufferStorageEXT(uint renderbuffer, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCheckNamedFramebufferStatusEXT(uint framebuffer, uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTexture1DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTexture2DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTexture3DEXT(uint framebuffer, uint attachment, uint textarget, uint texture, int level, int zoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferRenderbufferEXT(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, uint attachment, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenerateTextureMipmapEXT(uint texture, uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGenerateMultiTexMipmapEXT(uint texunit, uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferDrawBufferEXT(uint framebuffer, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferDrawBuffersEXT(uint framebuffer, int n, uint* bufs);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferReadBufferEXT(uint framebuffer, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFramebufferParameterivEXT(uint framebuffer, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTextureEXT(uint framebuffer, uint attachment, uint texture, int level);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTextureLayerEXT(uint framebuffer, uint attachment, uint texture, int level, int layer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTextureFaceEXT(uint framebuffer, uint attachment, uint texture, int level, uint face);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureRenderbufferEXT(uint texture, uint target, uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiTexRenderbufferEXT(uint texunit, uint target, uint renderbuffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayEdgeFlagOffsetEXT (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayIndexOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayNormalOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayMultiTexCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, uint texunit, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayFogCoordOffsetEXT (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArraySecondaryColorOffsetEXT (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int normalized, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribIOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableVertexArrayEXT (GLuint vaobj, GLenum array);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableVertexArrayEXT(uint vaobj, uint array);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableVertexArrayEXT (GLuint vaobj, GLenum array);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableVertexArrayEXT(uint vaobj, uint array);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEnableVertexArrayAttribEXT (GLuint vaobj, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEnableVertexArrayAttribEXT(uint vaobj, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDisableVertexArrayAttribEXT (GLuint vaobj, GLuint index);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDisableVertexArrayAttribEXT(uint vaobj, uint index);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayIntegervEXT (GLuint vaobj, GLenum pname, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayIntegervEXT(uint vaobj, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayPointervEXT (GLuint vaobj, GLenum pname, void **param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayPointervEXT(uint vaobj, uint pname, void** param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayIntegeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, uint pname, int* param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexArrayPointeri_vEXT (GLuint vaobj, GLuint index, GLenum pname, void **param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, uint pname, void** param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFlushMappedNamedBufferRangeEXT(uint buffer, nint offset, nint length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferStorageEXT (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferStorageEXT(uint buffer, nint size, void* data, uint flags);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedBufferDataEXT (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedBufferDataEXT(uint buffer, uint internalformat, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearNamedBufferSubDataEXT (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearNamedBufferSubDataEXT(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferParameteriEXT (GLuint framebuffer, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferParameteriEXT(uint framebuffer, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedFramebufferParameterivEXT(uint framebuffer, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1dEXT(uint program, int location, double x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2dEXT(uint program, int location, double x, double y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3dEXT(uint program, int location, double x, double y, double z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1dvEXT(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2dvEXT(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3dvEXT(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4dvEXT(uint program, int location, int count, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, int transpose, double* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureBufferRangeEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureBufferRangeEXT(uint texture, uint target, uint internalformat, uint buffer, nint offset, nint size);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage1DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage1DEXT(uint texture, uint target, int levels, uint internalformat, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage2DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage2DEXT(uint texture, uint target, int levels, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage3DEXT (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage3DEXT(uint texture, uint target, int levels, uint internalformat, int width, int height, int depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage2DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage2DMultisampleEXT(uint texture, uint target, int samples, uint internalformat, int width, int height, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureStorage3DMultisampleEXT (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureStorage3DMultisampleEXT(uint texture, uint target, int samples, uint internalformat, int width, int height, int depth, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayBindVertexBufferEXT (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, uint type, int normalized, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribIFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribLFormatEXT (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribBindingEXT (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexBindingDivisorEXT (GLuint vaobj, GLuint bindingindex, GLuint divisor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, uint type, int stride, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexturePageCommitmentEXT (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexArrayVertexAttribDivisorEXT (GLuint vaobj, GLuint index, GLuint divisor);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawArraysInstancedEXT(uint mode, int start, int count, int primcount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawElementsInstancedEXT(uint mode, int count, uint type, void* indices, int primcount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPolygonOffsetClampEXT (GLfloat factor, GLfloat units, GLfloat clamp);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPolygonOffsetClampEXT(float factor, float units, float clamp);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glRasterSamplesEXT (GLuint samples, GLboolean fixedsamplelocations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glRasterSamplesEXT(uint samples, int fixedsamplelocations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUseShaderProgramEXT(uint type, uint program);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glActiveProgramEXT (GLuint program);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glActiveProgramEXT(uint program);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glCreateShaderProgramEXT(uint type, byte* str);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferFetchBarrierEXT (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferFetchBarrierEXT();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage1DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage1DEXT(uint target, int levels, uint internalformat, int width);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage2DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage2DEXT(uint target, int levels, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexStorage3DEXT (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexStorage3DEXT(uint target, int levels, uint internalformat, int width, int height, int depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glWindowRectanglesEXT (GLenum mode, GLsizei count, const GLint *box);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glWindowRectanglesEXT(uint mode, int count, int* box);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glApplyFramebufferAttachmentCMAAINTEL (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glApplyFramebufferAttachmentCMAAINTEL();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginPerfQueryINTEL (GLuint queryHandle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginPerfQueryINTEL(uint queryHandle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreatePerfQueryINTEL (GLuint queryId, GLuint *queryHandle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreatePerfQueryINTEL(uint queryId, uint* queryHandle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeletePerfQueryINTEL (GLuint queryHandle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeletePerfQueryINTEL(uint queryHandle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndPerfQueryINTEL (GLuint queryHandle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndPerfQueryINTEL(uint queryHandle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFirstPerfQueryIdINTEL (GLuint *queryId);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFirstPerfQueryIdINTEL(uint* queryId);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNextPerfQueryIdINTEL (GLuint queryId, GLuint *nextQueryId);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfCounterInfoINTEL (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, nint* rawCounterMaxValue);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfQueryDataINTEL (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, void* data, uint* bytesWritten);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfQueryIdByNameINTEL (GLchar *queryName, GLuint *queryId);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfQueryIdByNameINTEL(byte* queryName, uint* queryId);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPerfQueryInfoINTEL (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferParameteriMESA (GLenum target, GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferParameteriMESA(uint target, uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetFramebufferParameterivMESA (GLenum target, GLenum pname, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetFramebufferParameterivMESA(uint target, uint pname, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawArraysIndirectBindlessNV(uint mode, void* indirect, int drawCount, int stride, int vertexBufferCount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElementsIndirectBindlessNV(uint mode, uint type, void* indirect, int drawCount, int stride, int vertexBufferCount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawArraysIndirectBindlessCountNV (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawArraysIndirectBindlessCountNV(uint mode, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawElementsIndirectBindlessCountNV (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawElementsIndirectBindlessCountNV(uint mode, uint type, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint64 APIENTRY glGetTextureHandleNV (GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetTextureHandleNV(uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint64 APIENTRY glGetTextureSamplerHandleNV (GLuint texture, GLuint sampler);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetTextureSamplerHandleNV(uint texture, uint sampler);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeTextureHandleResidentNV (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeTextureHandleResidentNV(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeTextureHandleNonResidentNV (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeTextureHandleNonResidentNV(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint64 APIENTRY glGetImageHandleNV (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetImageHandleNV(uint texture, int level, int layered, int layer, uint format);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeImageHandleResidentNV (GLuint64 handle, GLenum access);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeImageHandleResidentNV(nint handle, uint access);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeImageHandleNonResidentNV (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeImageHandleNonResidentNV(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformHandleui64NV (GLint location, GLuint64 value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformHandleui64NV(int location, nint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformHandleui64vNV (GLint location, GLsizei count, const GLuint64 *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformHandleui64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformHandleui64NV (GLuint program, GLint location, GLuint64 value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformHandleui64NV(uint program, int location, nint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformHandleui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformHandleui64vNV(uint program, int location, int count, nint* values);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsTextureHandleResidentNV (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsTextureHandleResidentNV(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsImageHandleResidentNV (GLuint64 handle);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsImageHandleResidentNV(nint handle);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendParameteriNV(uint pname, int value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBlendBarrierNV (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBlendBarrierNV();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glViewportPositionWScaleNV (GLuint index, GLfloat xcoeff, GLfloat ycoeff);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateStatesNV (GLsizei n, GLuint *states);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateStatesNV(int n, uint* states);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteStatesNV (GLsizei n, const GLuint *states);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteStatesNV(int n, uint* states);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsStateNV (GLuint state);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsStateNV(uint state);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStateCaptureNV (GLuint state, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStateCaptureNV(uint state, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGetCommandHeaderNV (GLenum tokenID, GLuint size);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGetCommandHeaderNV(uint tokenID, uint size);

    /// <remarks>
    /// <c>
    /// GLAPI GLushort APIENTRY glGetStageIndexNV (GLenum shadertype);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetStageIndexNV(uint shadertype);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawCommandsNV (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawCommandsNV(uint primitiveMode, uint buffer, nint* indirects, int* sizes, uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawCommandsAddressNV (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawCommandsAddressNV(uint primitiveMode, nint* indirects, int* sizes, uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawCommandsStatesNV (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawCommandsStatesNV(uint buffer, nint* indirects, int* sizes, uint* states, uint* fbos, uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawCommandsStatesAddressNV (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawCommandsStatesAddressNV(nint* indirects, int* sizes, uint* states, uint* fbos, uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCreateCommandListsNV (GLsizei n, GLuint *lists);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCreateCommandListsNV(int n, uint* lists);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeleteCommandListsNV (GLsizei n, const GLuint *lists);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeleteCommandListsNV(int n, uint* lists);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsCommandListNV (GLuint list);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsCommandListNV(uint list);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glListDrawCommandsStatesClientNV (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glListDrawCommandsStatesClientNV(uint list, uint segment, void** indirects, int* sizes, uint* states, uint* fbos, uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCommandListSegmentsNV (GLuint list, GLuint segments);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCommandListSegmentsNV(uint list, uint segments);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCompileCommandListNV (GLuint list);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCompileCommandListNV(uint list);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCallCommandListNV (GLuint list);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCallCommandListNV(uint list);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBeginConditionalRenderNV(uint id, uint mode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEndConditionalRenderNV (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEndConditionalRenderNV();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSubpixelPrecisionBiasNV (GLuint xbits, GLuint ybits);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSubpixelPrecisionBiasNV(uint xbits, uint ybits);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glConservativeRasterParameterfNV (GLenum pname, GLfloat value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glConservativeRasterParameterfNV(uint pname, float value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glConservativeRasterParameteriNV (GLenum pname, GLint param);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glConservativeRasterParameteriNV(uint pname, int param);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthRangedNV (GLdouble zNear, GLdouble zFar);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthRangedNV(double zNear, double zFar);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glClearDepthdNV (GLdouble depth);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glClearDepthdNV(double depth);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDepthBoundsdNV (GLdouble zmin, GLdouble zmax);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDepthBoundsdNV(double zmin, double zmax);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawVkImageNV (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawVkImageNV(nint vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);

    /// <remarks>
    /// <c>
    /// GLAPI GLVULKANPROCNV APIENTRY glGetVkProcAddrNV (const GLchar *name);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial nint glGetVkProcAddrNV(byte* name);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glWaitVkSemaphoreNV (GLuint64 vkSemaphore);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glWaitVkSemaphoreNV(nint vkSemaphore);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSignalVkSemaphoreNV (GLuint64 vkSemaphore);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSignalVkSemaphoreNV(nint vkSemaphore);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSignalVkFenceNV (GLuint64 vkFence);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSignalVkFenceNV(nint vkFence);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFragmentCoverageColorNV (GLuint color);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFragmentCoverageColorNV(uint color);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCoverageModulationTableNV (GLsizei n, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCoverageModulationTableNV(int n, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetCoverageModulationTableNV (GLsizei bufSize, GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetCoverageModulationTableNV(int bufSize, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCoverageModulationNV (GLenum components);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCoverageModulationNV(uint components);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glRenderbufferStorageMultisampleCoverageNV(uint target, int coverageSamples, int colorSamples, uint internalformat, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1i64NV(int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2i64NV(int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3i64NV(int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4i64NV(int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1i64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2i64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3i64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4i64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1ui64NV(int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2ui64NV(int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3ui64NV(int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4ui64NV(int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform1ui64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform2ui64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform3ui64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniform4ui64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformi64vNV(uint program, int location, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1i64NV(uint program, int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2i64NV(uint program, int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3i64NV(uint program, int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4i64NV(uint program, int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1i64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2i64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3i64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4i64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1ui64NV(uint program, int location, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2ui64NV(uint program, int location, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3ui64NV(uint program, int location, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4ui64NV(uint program, int location, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform1ui64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform2ui64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform3ui64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniform4ui64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetInternalformatSampleivNV (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetInternalformatSampleivNV(uint target, uint internalformat, int samples, uint pname, int count, int* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetMemoryObjectDetachedResourcesuivNV (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetMemoryObjectDetachedResourcesuivNV(uint memory, uint pname, int first, int count, uint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glResetMemoryObjectParameterNV (GLuint memory, GLenum pname);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glResetMemoryObjectParameterNV(uint memory, uint pname);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexAttachMemoryNV (GLenum target, GLuint memory, GLuint64 offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexAttachMemoryNV(uint target, uint memory, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferAttachMemoryNV (GLenum target, GLuint memory, GLuint64 offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferAttachMemoryNV(uint target, uint memory, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureAttachMemoryNV (GLuint texture, GLuint memory, GLuint64 offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureAttachMemoryNV(uint texture, uint memory, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferAttachMemoryNV (GLuint buffer, GLuint memory, GLuint64 offset);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferAttachMemoryNV(uint buffer, uint memory, nint offset);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferPageCommitmentMemNV (GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferPageCommitmentMemNV(uint target, nint offset, nint size, uint memory, nint memOffset, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexPageCommitmentMemNV (GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexPageCommitmentMemNV(uint target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, nint offset, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedBufferPageCommitmentMemNV (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedBufferPageCommitmentMemNV(uint buffer, nint offset, nint size, uint memory, nint memOffset, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexturePageCommitmentMemNV (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, nint offset, int commit);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawMeshTasksNV (GLuint first, GLuint count);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawMeshTasksNV(uint first, uint count);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDrawMeshTasksIndirectNV (GLintptr indirect);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDrawMeshTasksIndirectNV(nint indirect);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawMeshTasksIndirectNV (GLintptr indirect, GLsizei drawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMultiDrawMeshTasksIndirectCountNV (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI GLuint APIENTRY glGenPathsNV (GLsizei range);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glGenPathsNV(int range);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glDeletePathsNV (GLuint path, GLsizei range);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glDeletePathsNV(uint path, int range);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsPathNV (GLuint path);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsPathNV(uint path);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathCommandsNV (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathCommandsNV(uint path, int numCommands, nint* commands, int numCoords, uint coordType, void* coords);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathCoordsNV (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathCoordsNV(uint path, int numCoords, uint coordType, void* coords);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathSubCommandsNV (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, nint* commands, int numCoords, uint coordType, void* coords);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathSubCoordsNV (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathSubCoordsNV(uint path, int coordStart, int numCoords, uint coordType, void* coords);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathStringNV (GLuint path, GLenum format, GLsizei length, const void *pathString);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathStringNV(uint path, uint format, int length, void* pathString);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathGlyphsNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathGlyphsNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, int numGlyphs, uint type, void* charcodes, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathGlyphRangeNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathGlyphRangeNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyph, int numGlyphs, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glWeightPathsNV (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glWeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCopyPathNV (GLuint resultPath, GLuint srcPath);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCopyPathNV(uint resultPath, uint srcPath);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glInterpolatePathsNV (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTransformPathNV (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTransformPathNV(uint resultPath, uint srcPath, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathParameterivNV (GLuint path, GLenum pname, const GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathParameterivNV(uint path, uint pname, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathParameteriNV (GLuint path, GLenum pname, GLint value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathParameteriNV(uint path, uint pname, int value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathParameterfvNV (GLuint path, GLenum pname, const GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathParameterfvNV(uint path, uint pname, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathParameterfNV (GLuint path, GLenum pname, GLfloat value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathParameterfNV(uint path, uint pname, float value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathDashArrayNV (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathDashArrayNV(uint path, int dashCount, float* dashArray);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathStencilFuncNV (GLenum func, GLint ref, GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathStencilFuncNV(uint func, int refer, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathStencilDepthOffsetNV (GLfloat factor, GLfloat units);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathStencilDepthOffsetNV(float factor, float units);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilFillPathNV (GLuint path, GLenum fillMode, GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilFillPathNV(uint path, uint fillMode, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilStrokePathNV (GLuint path, GLint reference, GLuint mask);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilStrokePathNV(uint path, int reference, uint mask);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glPathCoverDepthFuncNV (GLenum func);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glPathCoverDepthFuncNV(uint func);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCoverFillPathNV (GLuint path, GLenum coverMode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCoverFillPathNV(uint path, uint coverMode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCoverStrokePathNV (GLuint path, GLenum coverMode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCoverStrokePathNV(uint path, uint coverMode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCoverFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glCoverStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathParameterivNV (GLuint path, GLenum pname, GLint *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathParameterivNV(uint path, uint pname, int* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathParameterfvNV (GLuint path, GLenum pname, GLfloat *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathParameterfvNV(uint path, uint pname, float* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathCommandsNV (GLuint path, GLubyte *commands);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathCommandsNV(uint path, nint* commands);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathCoordsNV (GLuint path, GLfloat *coords);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathCoordsNV(uint path, float* coords);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathDashArrayNV (GLuint path, GLfloat *dashArray);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathDashArrayNV(uint path, float* dashArray);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathMetricsNV (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathMetricsNV(uint metricQueryMask, int numPaths, uint pathNameType, void* paths, uint pathBase, int stride, float* metrics);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathMetricRangeNV (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetPathSpacingNV (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetPathSpacingNV(uint pathListMode, int numPaths, uint pathNameType, void* paths, uint pathBase, float advanceScale, float kerningScale, uint transformType, float* returnedSpacing);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsPointInFillPathNV (GLuint path, GLuint mask, GLfloat x, GLfloat y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsPointInFillPathNV(uint path, uint mask, float x, float y);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsPointInStrokePathNV (GLuint path, GLfloat x, GLfloat y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsPointInStrokePathNV(uint path, float x, float y);

    /// <remarks>
    /// <c>
    /// GLAPI GLfloat APIENTRY glGetPathLengthNV (GLuint path, GLsizei startSegment, GLsizei numSegments);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial float glGetPathLengthNV(uint path, int startSegment, int numSegments);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glPointAlongPathNV (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoad3x2fNV (GLenum matrixMode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoad3x2fNV(uint matrixMode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoad3x3fNV (GLenum matrixMode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoad3x3fNV(uint matrixMode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixLoadTranspose3x3fNV (GLenum matrixMode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixLoadTranspose3x3fNV(uint matrixMode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMult3x2fNV (GLenum matrixMode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMult3x2fNV(uint matrixMode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMult3x3fNV (GLenum matrixMode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMult3x3fNV(uint matrixMode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMatrixMultTranspose3x3fNV (GLenum matrixMode, const GLfloat *m);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMatrixMultTranspose3x3fNV(uint matrixMode, float* m);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilThenCoverFillPathNV (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilThenCoverFillPathNV(uint path, uint fillMode, uint mask, uint coverMode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilThenCoverStrokePathNV (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, uint coverMode);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilThenCoverFillPathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilThenCoverFillPathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint coverMode, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glStencilThenCoverStrokePathInstancedNV (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glStencilThenCoverStrokePathInstancedNV(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint coverMode, uint transformType, float* transformValues);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glPathGlyphIndexRangeNV (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint *baseAndCount);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glPathGlyphIndexRangeNV(uint fontTarget, void* fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glPathGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glPathGlyphIndexArrayNV(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);

    /// <remarks>
    /// <c>
    /// GLAPI GLenum APIENTRY glPathMemoryGlyphIndexArrayNV (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial uint glPathMemoryGlyphIndexArrayNV(uint firstPathName, uint fontTarget, nint fontSize, void* fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramPathFragmentInputGenNV (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramPathFragmentInputGenNV(uint program, int location, uint genMode, int components, float* coeffs);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetProgramResourcefvNV (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetProgramResourcefvNV(uint program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, float* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferSampleLocationsfvNV (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferSampleLocationsfvNV(uint target, uint start, int count, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferSampleLocationsfvNV (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glResolveDepthValuesNV (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glResolveDepthValuesNV();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glScissorExclusiveNV (GLint x, GLint y, GLsizei width, GLsizei height);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glScissorExclusiveNV(int x, int y, int width, int height);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glScissorExclusiveArrayvNV (GLuint first, GLsizei count, const GLint *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glScissorExclusiveArrayvNV(uint first, int count, int* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeBufferResidentNV(uint target, uint access);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeBufferNonResidentNV(uint target);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsBufferResidentNV(uint target);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeNamedBufferResidentNV(uint buffer, uint access);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glMakeNamedBufferNonResidentNV(uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial int glIsNamedBufferResidentNV(uint buffer);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetBufferParameterui64vNV(uint target, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetNamedBufferParameterui64vNV(uint buffer, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetIntegerui64vNV(uint value, nint* result);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformui64NV(int location, nint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glUniformui64vNV(int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetUniformui64vNV(uint program, int location, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformui64NV(uint program, int location, nint value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glProgramUniformui64vNV(uint program, int location, int count, nint* value);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBindShadingRateImageNV (GLuint texture);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBindShadingRateImageNV(uint texture);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetShadingRateImagePaletteNV (GLuint viewport, GLuint entry, GLenum *rate);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetShadingRateImagePaletteNV(uint viewport, uint entry, uint* rate);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetShadingRateSampleLocationivNV (GLenum rate, GLuint samples, GLuint index, GLint *location);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetShadingRateSampleLocationivNV(uint rate, uint samples, uint index, int* location);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShadingRateImageBarrierNV (GLboolean synchronize);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShadingRateImageBarrierNV(int synchronize);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShadingRateImagePaletteNV (GLuint viewport, GLuint first, GLsizei count, const GLenum *rates);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShadingRateImagePaletteNV(uint viewport, uint first, int count, uint* rates);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShadingRateSampleOrderNV (GLenum order);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShadingRateSampleOrderNV(uint order);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glShadingRateSampleOrderCustomNV (GLenum rate, GLuint samples, const GLint *locations);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glShadingRateSampleOrderCustomNV(uint rate, uint samples, int* locations);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTextureBarrierNV (void);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTextureBarrierNV();

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1i64NV(uint index, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL2i64NV(uint index, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL3i64NV(uint index, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL4i64NV(uint index, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1i64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL2i64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL3i64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL4i64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1ui64NV(uint index, nint x);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL2ui64NV(uint index, nint x, nint y);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL3ui64NV(uint index, nint x, nint y, nint z);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL4ui64NV(uint index, nint x, nint y, nint z, nint w);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL1ui64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL2ui64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL3ui64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribL4ui64vNV(uint index, nint* v);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribLi64vNV(uint index, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetVertexAttribLui64vNV(uint index, uint pname, nint* prms);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribLFormatNV(uint index, int size, uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glBufferAddressRangeNV(uint pname, uint index, nint address, nint length);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexFormatNV(int size, uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNormalFormatNV(uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glColorFormatNV(int size, uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glIndexFormatNV(uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glTexCoordFormatNV(int size, uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glEdgeFlagFormatNV(int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glSecondaryColorFormatNV(int size, uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFogCoordFormatNV(uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribFormatNV(uint index, int size, uint type, int normalized, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glVertexAttribIFormatNV(uint index, int size, uint type, int stride);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glGetIntegerui64i_vNV(uint value, uint index, nint* result);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glViewportSwizzleNV (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glViewportSwizzleNV(uint index, uint swizzlex, uint swizzley, uint swizzlez, uint swizzlew);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glFramebufferTextureMultiviewOVR (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glFramebufferTextureMultiviewOVR(uint target, uint attachment, uint texture, int level, int baseViewIndex, int numViews);

    /// <remarks>
    /// <c>
    /// GLAPI void APIENTRY glNamedFramebufferTextureMultiviewOVR (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
    /// </c>
    /// </remarks>
    [LibraryImport("opengl32.dll")]
    public static partial void glNamedFramebufferTextureMultiviewOVR(uint framebuffer, uint attachment, uint texture, int level, int baseViewIndex, int numViews);
}